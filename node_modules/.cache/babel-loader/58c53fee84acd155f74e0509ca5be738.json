{"ast":null,"code":"import _classPrivateFieldLooseBase from \"/home/kevin/websites/html/jump-and-run-js/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classPrivateFieldLooseBase\";\nimport _classPrivateFieldLooseKey from \"/home/kevin/websites/html/jump-and-run-js/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classPrivateFieldLooseKey\";\nimport Sprite from './sprite-model';\nimport { store } from '../../store/store';\n\nvar _r = _classPrivateFieldLooseKey(\"r\");\n\nvar _vx = _classPrivateFieldLooseKey(\"vx\");\n\nvar _vy = _classPrivateFieldLooseKey(\"vy\");\n\nvar _ax = _classPrivateFieldLooseKey(\"ax\");\n\nvar _ay = _classPrivateFieldLooseKey(\"ay\");\n\nvar _y = _classPrivateFieldLooseKey(\"y\");\n\nvar _x = _classPrivateFieldLooseKey(\"x\");\n\nvar _friction = _classPrivateFieldLooseKey(\"friction\");\n\nvar _speed = _classPrivateFieldLooseKey(\"speed\");\n\nvar _sprite = _classPrivateFieldLooseKey(\"sprite\");\n\nexport default class Spaceship {\n  constructor(x, y, spriteImg) {\n    Object.defineProperty(this, _r, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _vx, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _vy, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _ax, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _ay, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _y, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _x, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _friction, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _speed, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _sprite, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldLooseBase(this, _r)[_r] = 0;\n    _classPrivateFieldLooseBase(this, _vx)[_vx] = 0;\n    _classPrivateFieldLooseBase(this, _vy)[_vy] = 0;\n    _classPrivateFieldLooseBase(this, _ax)[_ax] = 0;\n    _classPrivateFieldLooseBase(this, _ay)[_ay] = 0;\n    _classPrivateFieldLooseBase(this, _x)[_x] = x;\n    _classPrivateFieldLooseBase(this, _y)[_y] = y;\n    _classPrivateFieldLooseBase(this, _friction)[_friction] = 0.99;\n    _classPrivateFieldLooseBase(this, _speed)[_speed] = 0.1;\n    _classPrivateFieldLooseBase(this, _sprite)[_sprite] = new Sprite(spriteImg, 0, 0, 100, 100, x, y, [0, 100, 200, 300]);\n  }\n\n  move() {\n    const keys = store.getState().keys;\n\n    if (!this.checkBorderCollision()) {\n      if (keys['KeyW']) {\n        _classPrivateFieldLooseBase(this, _ax)[_ax] = Math.sin(_classPrivateFieldLooseBase(this, _r)[_r]) * _classPrivateFieldLooseBase(this, _speed)[_speed];\n        _classPrivateFieldLooseBase(this, _ay)[_ay] = Math.cos(_classPrivateFieldLooseBase(this, _r)[_r]) * _classPrivateFieldLooseBase(this, _speed)[_speed];\n      } else {\n        _classPrivateFieldLooseBase(this, _ax)[_ax] = _classPrivateFieldLooseBase(this, _ay)[_ay] = 0;\n      }\n    }\n\n    if (keys['KeyA']) _classPrivateFieldLooseBase(this, _r)[_r] -= 0.02;\n    if (keys['KeyD']) _classPrivateFieldLooseBase(this, _r)[_r] += 0.02;\n    _classPrivateFieldLooseBase(this, _vx)[_vx] += _classPrivateFieldLooseBase(this, _ax)[_ax];\n    _classPrivateFieldLooseBase(this, _vy)[_vy] += _classPrivateFieldLooseBase(this, _ay)[_ay];\n    _classPrivateFieldLooseBase(this, _vx)[_vx] *= _classPrivateFieldLooseBase(this, _friction)[_friction];\n    _classPrivateFieldLooseBase(this, _vy)[_vy] *= _classPrivateFieldLooseBase(this, _friction)[_friction];\n    _classPrivateFieldLooseBase(this, _x)[_x] += _classPrivateFieldLooseBase(this, _vx)[_vx];\n    _classPrivateFieldLooseBase(this, _y)[_y] -= _classPrivateFieldLooseBase(this, _vy)[_vy];\n    _classPrivateFieldLooseBase(this, _sprite)[_sprite].r = _classPrivateFieldLooseBase(this, _r)[_r];\n  }\n\n  checkBorderCollision() {\n    const width = store.getState().canvas.width;\n    const height = store.getState().canvas.height;\n    if (_classPrivateFieldLooseBase(this, _x)[_x] + 100 <= 0) _classPrivateFieldLooseBase(this, _x)[_x] = width;\n  }\n\n  update() {\n    this.move();\n    _classPrivateFieldLooseBase(this, _sprite)[_sprite].x = _classPrivateFieldLooseBase(this, _x)[_x];\n    _classPrivateFieldLooseBase(this, _sprite)[_sprite].y = _classPrivateFieldLooseBase(this, _y)[_y];\n\n    _classPrivateFieldLooseBase(this, _sprite)[_sprite].update();\n  }\n\n  render() {\n    this.update();\n\n    _classPrivateFieldLooseBase(this, _sprite)[_sprite].draw();\n  }\n\n}","map":{"version":3,"sources":["/home/kevin/websites/html/jump-and-run-js/src/assets/scripts/models/spaceship-model.js"],"names":["Sprite","store","Spaceship","constructor","x","y","spriteImg","move","keys","getState","checkBorderCollision","Math","sin","cos","r","width","canvas","height","update","render","draw"],"mappings":";;AAAA,OAAOA,MAAP,MAAmB,gBAAnB;AACA,SAAQC,KAAR,QAAoB,mBAApB;;;;;;;;;;;;;;;;;;;;;;AACA,eAAe,MAAMC,SAAN,CAAe;AAa1BC,EAAAA,WAAW,CAACC,CAAD,EAAIC,CAAJ,EAAOC,SAAP,EAAiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAExB,gDAAU,CAAV;AACA,kDAAW,CAAX;AACA,kDAAW,CAAX;AACA,kDAAW,CAAX;AACA,kDAAW,CAAX;AACA,gDAAUF,CAAV;AACA,gDAAUC,CAAV;AACA,8DAAiB,IAAjB;AACA,wDAAc,GAAd;AACA,0DAAe,IAAIL,MAAJ,CACXM,SADW,EAEX,CAFW,EAER,CAFQ,EAGX,GAHW,EAGN,GAHM,EAIXF,CAJW,EAIRC,CAJQ,EAKX,CAAC,CAAD,EAAI,GAAJ,EAAS,GAAT,EAAc,GAAd,CALW,CAAf;AAMH;;AAEDE,EAAAA,IAAI,GAAE;AAEF,UAAMC,IAAI,GAAGP,KAAK,CAACQ,QAAN,GAAiBD,IAA9B;;AAEA,QAAG,CAAC,KAAKE,oBAAL,EAAJ,EAAgC;AAC5B,UAAGF,IAAI,CAAC,MAAD,CAAP,EAAgB;AACZ,sDAAWG,IAAI,CAACC,GAAL,6BAAS,IAAT,yCAAoB,IAApB,iBAAX;AACA,sDAAWD,IAAI,CAACE,GAAL,6BAAS,IAAT,yCAAoB,IAApB,iBAAX;AACH,OAHD,MAGM;AACF,sDAAW,8CAAW,CAAtB;AACH;AACJ;;AAED,QAAGL,IAAI,CAAC,MAAD,CAAP,EAAiB,6CAAW,IAAX;AACjB,QAAGA,IAAI,CAAC,MAAD,CAAP,EAAiB,6CAAW,IAAX;AAEjB,+EAAY,IAAZ;AACA,+EAAY,IAAZ;AAEA,+EAAY,IAAZ;AACA,+EAAY,IAAZ;AAEA,6EAAW,IAAX;AACA,6EAAW,IAAX;AAEA,wDAAaM,CAAb,+BAAiB,IAAjB;AACH;;AAEDJ,EAAAA,oBAAoB,GAAE;AAElB,UAAMK,KAAK,GAAGd,KAAK,CAACQ,QAAN,GAAiBO,MAAjB,CAAwBD,KAAtC;AACA,UAAME,MAAM,GAAGhB,KAAK,CAACQ,QAAN,GAAiBO,MAAjB,CAAwBC,MAAvC;AAEA,QAAG,4CAAU,GAAV,IAAiB,CAApB,EAAuB,4CAAUF,KAAV;AAC1B;;AAEDG,EAAAA,MAAM,GAAE;AAEJ,SAAKX,IAAL;AACA,wDAAaH,CAAb,+BAAiB,IAAjB;AACA,wDAAaC,CAAb,+BAAiB,IAAjB;;AACA,wDAAaa,MAAb;AACH;;AAEDC,EAAAA,MAAM,GAAE;AACJ,SAAKD,MAAL;;AACA,wDAAaE,IAAb;AACH;;AA/EyB","sourcesContent":["import Sprite from './sprite-model'\nimport {store} from '../../store/store'\nexport default class Spaceship{\n\n    #r  \n    #vx\n    #vy\n    #ax\n    #ay\n    #y\n    #x\n    #friction\n    #speed\n    #sprite\n\n    constructor(x, y, spriteImg){\n\n        this.#r = 0\n        this.#vx = 0\n        this.#vy = 0\n        this.#ax = 0\n        this.#ay = 0\n        this.#x = x\n        this.#y = y\n        this.#friction = 0.99\n        this.#speed = 0.1\n        this.#sprite = new Sprite(\n            spriteImg,\n            0, 0,\n            100, 100, \n            x, y, \n            [0, 100, 200, 300])\n    }\n\n    move(){\n\n        const keys = store.getState().keys\n        \n        if(!this.checkBorderCollision()){\n            if(keys['KeyW']){ \n                this.#ax = Math.sin(this.#r) * this.#speed\n                this.#ay = Math.cos(this.#r) * this.#speed\n            }else {\n                this.#ax = this.#ay = 0\n            }\n        }\n\n        if(keys['KeyA']) this.#r -= 0.02\n        if(keys['KeyD']) this.#r += 0.02\n\n        this.#vx += this.#ax\n        this.#vy += this.#ay\n\n        this.#vx *= this.#friction\n        this.#vy *= this.#friction\n\n        this.#x += this.#vx\n        this.#y -= this.#vy\n\n        this.#sprite.r = this.#r\n    }\n\n    checkBorderCollision(){\n\n        const width = store.getState().canvas.width\n        const height = store.getState().canvas.height\n        \n        if(this.#x + 100 <= 0) this.#x = width\n    }\n\n    update(){\n\n        this.move()\n        this.#sprite.x = this.#x\n        this.#sprite.y = this.#y\n        this.#sprite.update()\n    }\n\n    render(){\n        this.update()\n        this.#sprite.draw()\n    }\n}"]},"metadata":{},"sourceType":"module"}