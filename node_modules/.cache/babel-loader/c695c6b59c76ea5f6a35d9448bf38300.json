{"ast":null,"code":"import Spaceship from './models/spaceship-model';\nimport { store } from '../store/store';\n\nclass Game {\n  init() {\n    console.log('Game initialized.');\n    this.createSprites();\n    this.start();\n  }\n\n  start() {\n    this.canvas = document.getElementById('gameBoard');\n    this.context = this.canvas.getContext('2d');\n    this.loop = window.requestAnimationFrame(() => this.update());\n  }\n\n  update() {\n    const gameIsPaused = store.getState().game.gameIsPaused;\n    this.clear();\n    this.spaceship.update();\n    this.draw();\n    if (!gameIsPaused) this.loop = window.requestAnimationFrame(() => this.update());\n  }\n\n  checkPause() {\n    const keys = store.getState().keys;\n    if (keys['space']) this.togglePause();\n  }\n\n  togglePause() {\n    const gameIsPaused = store.getState().game.gameIsPaused;\n    if (!gameIsPaused) store.dispatch({\n      type: 'game/PauseGame'\n    });else {\n      if (gameIsPaused) store.dispatch({\n        type: 'game/ContinueGame'\n      });\n      this.update();\n    }\n  }\n\n  stop() {\n    window.cancelAnimationFrame(this.loop);\n  }\n\n  createSprites() {\n    const spaceshipImg = document.getElementById('spaceship');\n    const width = store.getState().canvas.width;\n    const height = store.getState().canvas.height;\n    this.spaceship = new Spaceship(width / 2 - 50, height / 2 - 50, spaceshipImg); //minus 50px -> half of width from the rendered sprite to center the image in the canvas\n  }\n\n  draw() {\n    this.spaceship.render();\n  }\n\n  clear() {\n    const width = store.getState().canvas.width;\n    const height = store.getState().canvas.height;\n    this.context.clearRect(0, 0, width, height);\n  }\n\n}\n\nconst game = new Game();\nexport { game };","map":{"version":3,"sources":["/home/kevin/websites/html/jump-and-run-js/src/assets/scripts/game.js"],"names":["Spaceship","store","Game","init","console","log","createSprites","start","canvas","document","getElementById","context","getContext","loop","window","requestAnimationFrame","update","gameIsPaused","getState","game","clear","spaceship","draw","checkPause","keys","togglePause","dispatch","type","stop","cancelAnimationFrame","spaceshipImg","width","height","render","clearRect"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,0BAAtB;AACA,SAASC,KAAT,QAAsB,gBAAtB;;AACA,MAAMC,IAAN,CAAU;AAENC,EAAAA,IAAI,GAAE;AAEFC,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACA,SAAKC,aAAL;AACA,SAAKC,KAAL;AACH;;AAEDA,EAAAA,KAAK,GAAE;AAEH,SAAKC,MAAL,GAAcC,QAAQ,CAACC,cAAT,CAAwB,WAAxB,CAAd;AACA,SAAKC,OAAL,GAAe,KAAKH,MAAL,CAAYI,UAAZ,CAAuB,IAAvB,CAAf;AACA,SAAKC,IAAL,GAAYC,MAAM,CAACC,qBAAP,CAA6B,MAAM,KAAKC,MAAL,EAAnC,CAAZ;AACH;;AAEDA,EAAAA,MAAM,GAAE;AAEJ,UAAMC,YAAY,GAAGhB,KAAK,CAACiB,QAAN,GAAiBC,IAAjB,CAAsBF,YAA3C;AAEA,SAAKG,KAAL;AACA,SAAKC,SAAL,CAAeL,MAAf;AACA,SAAKM,IAAL;AAEA,QAAG,CAACL,YAAJ,EAAkB,KAAKJ,IAAL,GAAYC,MAAM,CAACC,qBAAP,CAA6B,MAAM,KAAKC,MAAL,EAAnC,CAAZ;AAErB;;AAEDO,EAAAA,UAAU,GAAE;AACR,UAAMC,IAAI,GAAGvB,KAAK,CAACiB,QAAN,GAAiBM,IAA9B;AACA,QAAGA,IAAI,CAAC,OAAD,CAAP,EAAkB,KAAKC,WAAL;AACrB;;AAEDA,EAAAA,WAAW,GAAE;AAET,UAAMR,YAAY,GAAGhB,KAAK,CAACiB,QAAN,GAAiBC,IAAjB,CAAsBF,YAA3C;AAEA,QAAG,CAACA,YAAJ,EAAkBhB,KAAK,CAACyB,QAAN,CAAe;AAAEC,MAAAA,IAAI,EAAE;AAAR,KAAf,EAAlB,KACK;AAED,UAAGV,YAAH,EAAiBhB,KAAK,CAACyB,QAAN,CAAe;AAAEC,QAAAA,IAAI,EAAE;AAAR,OAAf;AACjB,WAAKX,MAAL;AACH;AACJ;;AAEDY,EAAAA,IAAI,GAAE;AAAEd,IAAAA,MAAM,CAACe,oBAAP,CAA4B,KAAKhB,IAAjC;AAAwC;;AAEhDP,EAAAA,aAAa,GAAE;AAEX,UAAMwB,YAAY,GAAGrB,QAAQ,CAACC,cAAT,CAAwB,WAAxB,CAArB;AACA,UAAMqB,KAAK,GAAG9B,KAAK,CAACiB,QAAN,GAAiBV,MAAjB,CAAwBuB,KAAtC;AACA,UAAMC,MAAM,GAAG/B,KAAK,CAACiB,QAAN,GAAiBV,MAAjB,CAAwBwB,MAAvC;AAEA,SAAKX,SAAL,GAAiB,IAAIrB,SAAJ,CAAgB+B,KAAK,GAAG,CAAT,GAAc,EAA7B,EAAkCC,MAAM,GAAG,CAAV,GAAe,EAAhD,EAAoDF,YAApD,CAAjB,CANW,CAMwE;AACtF;;AAEDR,EAAAA,IAAI,GAAE;AAAE,SAAKD,SAAL,CAAeY,MAAf;AAAyB;;AAEjCb,EAAAA,KAAK,GAAE;AACH,UAAMW,KAAK,GAAG9B,KAAK,CAACiB,QAAN,GAAiBV,MAAjB,CAAwBuB,KAAtC;AACA,UAAMC,MAAM,GAAG/B,KAAK,CAACiB,QAAN,GAAiBV,MAAjB,CAAwBwB,MAAvC;AAEA,SAAKrB,OAAL,CAAauB,SAAb,CAAuB,CAAvB,EAAyB,CAAzB,EAA4BH,KAA5B,EAAmCC,MAAnC;AACH;;AA/DK;;AAiEV,MAAMb,IAAI,GAAG,IAAIjB,IAAJ,EAAb;AACA,SAAQiB,IAAR","sourcesContent":["import Spaceship from './models/spaceship-model'\nimport { store } from '../store/store'\nclass Game{\n\n    init(){\n        \n        console.log('Game initialized.')\n        this.createSprites()\n        this.start()\n    }   \n\n    start(){\n\n        this.canvas = document.getElementById('gameBoard')\n        this.context = this.canvas.getContext('2d')\n        this.loop = window.requestAnimationFrame(() => this.update())\n    }\n\n    update(){\n\n        const gameIsPaused = store.getState().game.gameIsPaused\n\n        this.clear()\n        this.spaceship.update()\n        this.draw()\n\n        if(!gameIsPaused) this.loop = window.requestAnimationFrame(() => this.update())\n\n    }\n\n    checkPause(){\n        const keys = store.getState().keys\n        if(keys['space']) this.togglePause()\n    }\n\n    togglePause(){\n\n        const gameIsPaused = store.getState().game.gameIsPaused\n        \n        if(!gameIsPaused) store.dispatch({ type: 'game/PauseGame'})\n        else {\n\n            if(gameIsPaused) store.dispatch({ type: 'game/ContinueGame'})\n            this.update()\n        }\n    }\n\n    stop(){ window.cancelAnimationFrame(this.loop) }\n\n    createSprites(){\n\n        const spaceshipImg = document.getElementById('spaceship')\n        const width = store.getState().canvas.width\n        const height = store.getState().canvas.height\n\n        this.spaceship = new Spaceship( (width / 2) - 50, (height / 2) - 50, spaceshipImg) //minus 50px -> half of width from the rendered sprite to center the image in the canvas\n    }\n\n    draw(){ this.spaceship.render() }\n\n    clear(){\n        const width = store.getState().canvas.width\n        const height = store.getState().canvas.height\n\n        this.context.clearRect(0,0, width, height)\n    }\n}\nconst game = new Game()\nexport {game}"]},"metadata":{},"sourceType":"module"}